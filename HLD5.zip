
CREATE TABLE my_companies
(company_id CHAR(3),
 company_name VARCHAR(20)
);
INSERT INTO my_companies VALUES (100,'IBM');
INSERT INTO my_companies VALUES (101,'GOOGLE');
INSERT INTO my_companies VALUES (102,'MICROSOFT');
INSERT INTO my_companies VALUES (103,'APPLE');

SELECT*FROM my_companies;

CREATE TABLE orders 
(company_id CHAR(3),
 order_id CHAR(3),
 order_date DATE
)
INSERT INTO orders VALUES (101,11,'17-Apr-2020');
INSERT INTO orders VALUES (102,22,'18-Apr-2020');
INSERT INTO orders VALUES (103,33,'19-Apr-2020');
INSERT INTO orders VALUES (104,44,'20-Apr-2020');
INSERT INTO orders VALUES (105,55,'21-Apr-2020');
SELECT *FROM orders;
--1) Inner join
--ortak company icin company_name , order_id ve order_date degerlerini cagirin
SELECT company_name,order_id,order_date
FROM my_companies INNER JOIN orders
ON my_companies.company_id=orders.company_id;
--2) left JOin
--my_campanies table'daki company icin order_id ve order_date degerlerini cagirin
SELECT mc.company_name,o.order_id,o.order_date
FROM my_companies mc LEFT JOIN orders o
On mc.company_id=o.company_id;
--3) RIGHT JOIN
--orders table'indaki company'ler icin company_name,company_id ve order_date degerelrini cagirin
--1.yol
SELECT mc.company_name,o.company_id,o.order_date
FROM my_companies mc RIGHT JOIN
orders o
ON mc.company_id=o.company_id;
--2.yol
SELECT mc.company_name,o.company_id,o.order_date
FROM orders o LEFT JOIN my_companies mc

ON mc.company_id=o.company_id;

--FULL join
--iki table'dan da company_name,order_id ve order_date degerelri cagirin
SELECT mc.company_name,o.order_id,o.order_date
FROM orders o
FULL join my_companies mc
ON o.company_id=mc.company_id;

--SELf join
CREATE TABLE workers 
(
id CHAR (2),
name VARCHAR(20),
title VARCHAR(60),
manager_id CHAR(2));

INSERT INTO workers VALUES (1,'Ali Can','SDET',2);
INSERT INTO workers VALUES (2,'John Walker','QA',3);
INSERT INTO workers VALUES (3,'Angie Star','QA Lead',4);
INSERT INTO workers VALUES (4,'Amy Sky','CEO',5);
SELECT*FROM workers ;
--workers tablosundanu kullanarak calisanlarin yöneticilerini gösteren bir tablo hazirlayin
SELECT employee.name,manager.name
FROM workers employee INNER JOIN workers manager
ON employee.manager_id =manager.id;

--ALTER TABLE
--1) FIeld (sutun) ekleme
ALTER table workers 
ADD company_industry VARCHAR(20);
SELECT*FROM workers;
--2) default(varsayilan) deger ile sutun ekleme :
ALTER TABLE workers
ADD worker_address VARCHAR(80) DEFAULT 'MIAMI,FL;USA'
--3) COKLU FIELD EKLEME
ALTER TABLE workers
ADD COLUMN number_of_workers CHAR(5)DEFAULT 0,
ADD COLUMN number_of_ceo VARCHAR(20);
--4) TABLE (FIELD)nasil kaldirilir
ALTER TABLE workers
DROP COLUMN name_of_ceo;
--5) TABLE nasil yeniden adlandirilir
ALTER TABLE workers 
RENAME COLUMN company_industry TO company_proffession;
--6) Tablenasil yeniden adlanririlir
ALTER TABLE  workers 
RENAME TO employees;
SELECT*FROM employees;
--7) FIELD nasil modifiye edilir (constrait ekleme ,data tipi degistirme,data kapasite degistirme)
--Not constrait eklerken mevcut data durumuna dikkat ediniz
--a)constraint ekleme :
--a1) number_of_workers  sütununa "NOT NULL" constrait ekleyin
 ALTER TABLE employees
ALTER COLUMN number_of_workers SET NOT NULL;

--a2) company_profession sütununa "UNIQUE" contraint ekleyin
ALTER TABLE employees

ADD CONSTRAINT company_proffession_unique UNIQUE(company_proffession);
--a3) company_adress sütununa "UNIQUE" contraint ekleyin
ALTER TABLE employees

ADD CONSTRAINT company_address_unique UNIQUE(company_address);--mevcut veri tekrarli oldugundan unique constrait atanamaz
--b) Data tipi yada Boyutu degistirme 
--b1)company_proffession sütunun data tipini CHAR(5) yapin
ALTER TABLE employees
ALTER COLUMN company_proffession TYPE CHAR(5);
--b2)worker_address sütunun data typini char(5) yapin
ALTER TABLE employees
ALTER COLUMN worker_address TYPE CHAR(5);--Sütunun data boyutu kücültülemmektedir, bazi datalar verilmek istenen boyuttan yüksekir
SELECT*FROM employees ;
--Function(Fonksiyon)nasil yazilir...:
--bazi görevleri daha hizli yapabilmek icin Function olusturulur (Ortalam alma vs)
--CRUD operation icin function olusturulabilr 
--return type olarak datra vermeyen islemler "Procedure "denilir
CREATE FUNCTIOn addf(x numeric ,y numeric)
Returns NUmeric 
LANGUAGE plpgsql
AS
$$
BEGIN 
RETURN x+y;
END
$$

SELECT *FROM addf(2,3)AS "addition";
--koninin hacmini hesaplayan bir function yaziniz 
CREATE or REPLACE FUNCTIOn volume_of_cone(r numeric ,h numeric)
Returns NUmeric 
LANGUAGE plpgsql
AS
$$
BEGIN 
RETURN 3.14*r*r.h*1/3;
END
$$

SELECT *FROM addf(3,6)AS "VOLUME";