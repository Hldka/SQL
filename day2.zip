--Databa(veritabani)olusturma
create database hld;
create database abd;
-- DDL -DATA DEFINITION LANG
-- Create -Tablo OLUSTURMA
CREATE TABLE ogrenciler1
(
ogrenci_no char(7),
	isim varchar(20),
	soyisim varchar(25),
	not_ort real,-- ondalikli Sayilar icin kullanilir (double gibi)
	kayit_tarih date

);
--Varolan tablodan yeni bir tablo olusturma 
Create Table ogrenci_notlari 
As -- Benzer tablodaki basliklarla ve data tipleriyle yeni bir tablo olusturmak icin normal
--tablo olustururken ki parantezler 
--yerine As kullanip select komutuyla almak istedigimiz verileri aliriz
SELECT isim,soyisim,not_ort,kayit_tarih From ogrenciler1;

-- DML-DATA manupulation lang.
--inser (Database'e veri ekleme)

INSERT INTO ogrenciler1 values('1234567','said','ilhan',85.5,now());
INSERT INTO ogrenciler1 values('1234567','said','ilhan',85.5,'2020-12-11');

--bir tabloya parcali veri eklemek istersek
Insert into ogrenciler1 (isim,soyisim) values('Hld','Abd');
CREATE TABLE ogrenciler5
(
ogrenci_no char(7),-- Uzunluğunu bildiğimiz stringler için CHAR kullanılır
isim varchar(20), -- Uzunluğunu bilmediğimiz stringler için VARCHAR kullanırız
soyisim varchar(25),
not_ort real,-- Ondalıklı sayılar için kullanılır(Double gibi)
kayit_tarih date);

--DQL -Data query lang.
--select
select * From ogrenciler1;
select*from notlar;
--constraint
--unique
--Not Null

CREATE TABLE ogrenciler6
(
ogrenci_no char(7),-- Uzunluğunu bildiğimiz stringler için CHAR kullanılır
isim varchar(20), -- Uzunluğunu bilmediğimiz stringler için VARCHAR kullanırız
soyisim varchar(25),
not_ort real,-- Ondalıklı sayılar için kullanılır(Double gibi)
kayit_tarih date);
select *from ogrenciler6;
CREATE TABLE ogrenciler7
(
ogrenci_no char(7)unique,-- Uzunluğunu bildiğimiz stringler için CHAR kullanılır
isim varchar(20)not null, -- Uzunluğunu bilmediğimiz stringler için VARCHAR kullanırız
soyisim varchar(25),
not_ort real,-- Ondalıklı sayılar için kullanılır(Double gibi)
kayit_tarih date);
select *from ogrenciler7;
Insert Into ogrenciler7 values('1234567','halide','kara',96.4,now());
Insert Into ogrenciler7 values('1234568','Ali','veli',96.4,now());
Insert into ogrenciler7(ogrenci_no,soyisim,not_ort)values('1234569','Evren',85.5);--NOt NUll kisitlamasi oldugu icin bu veri eklenemez

--PRIMARY KEY OLUSTURMA 

CREATE TABLE ogrenciler8
(
ogrenci_no char(7)PRIMARY KEY,-- Uzunluğunu bildiğimiz stringler için CHAR kullanılır
isim varchar(20), -- Uzunluğunu bilmediğimiz stringler için VARCHAR kullanırız
soyisim varchar(25),
not_ort real,-- Ondalıklı sayılar için kullanılır(Double gibi)
kayit_tarih date);

--PRIMARY KEY ATAMASI 2. YOL
CREATE TABLE ogrenciler9
(
ogrenci_no char(7),
isim varchar(20), 
soyisim varchar(25),
not_ort real,
kayit_tarih date,
CONSTRAINT ogr PRIMARY KEY(ogrenci_no)
);
--primary key atamasi 3.yol
CREATE TABLE ogrenciler10
(
ogrenci_no char(7),
isim varchar(20), 
soyisim varchar(25),
not_ort real,
kayit_tarih date,
PRIMARY KEY(ogrenci_no)
);

--Practice 4:
--“tedarikciler3” isimli bir tablo olusturun. Tabloda “tedarikci_id”, “tedarikci_ismi”, “iletisim_isim” field’lari olsun ve “tedarikci_id” yi Primary Key yapin.
--“urunler” isminde baska bir tablo olusturun “tedarikci_id” ve “urun_id” field’lari olsun ve
--“tedarikci_id” yi Foreign Key yapin.
CREATE TABLE tedarikciler3
(
tedarikci_id char(5) PRIMARY KEY,
tedarikci_ismi varchar(20),
iletisim_isim varchar(20)
);
CREATE TABLE urunler
(
tedarikci_id char(5),
urun_id char(5),
FOREIGN KEY (tedarikci_id) REFERENCES tedarikciler3(tedarikci_id)
);
CREATE TABLE urunler
(
tedarikci_id char(5),
urun_id char(5),
CONSTRAINT urn_fk FOREIGN KEY (tedarikci_id) REFERENCES tedarikciler3(tedarikci_id)
);

/*
“calisanlar” isimli bir Tablo olusturun. Icinde “id”, “isim”, “maas”, “ise_baslama” field’lari olsun. “id” yi Primary Key yapin, “isim” i Unique, “maas” i Not Null yapın.
“adresler” isminde baska bir tablo olusturun.Icinde “adres_id”, “sokak”, “cadde” ve “sehir” fieldlari olsun. “adres_id” field‘i ile Foreign Key oluşturun.
*/

CREATE TABLE calisanlar
(
id varchar(15) PRIMARY KEY,
isim varchar(30) UNIQUE,
maas int NOT NULL,
ise_baslama date
);
	
CREATE TABLE adresler
(
adres_id varchar(30),
sokak varchar(30),
cadde varchar(30),
sehir varchar(30),
FOREIGN KEY (adres_id) REFERENCES calisanlar(id)
);

select*From adresler;
INSERT INTO calisanlar VALUES('10002', 'Mehmet Yılmaz' ,12000, '2018-04-14');
INSERT INTO calisanlar VALUES('10008', null, 5000, '2018-04-14');
--INSERT INTO calisanlar VALUES('10010', 'Mehmet Yılmaz', 5000, '2018-04-14'); -- UNIQUE CONS. Kabul etmez
INSERT INTO calisanlar VALUES('10004', 'Veli Han', 5000, '2018-04-14');
INSERT INTO calisanlar VALUES('10005', 'Mustafa Ali', 5000, '2018-04-14');
--INSERT INTO calisanlar VALUES('10006', 'Canan Yaş', NULL, '2019-04-12'); -- NOT NULL CONS. Kabul etmez
INSERT INTO calisanlar VALUES('10003', 'CAN', 5000, '2018-04-14');
--INSERT INTO calisanlar VALUES('10007', 'CAN', 5000, '2018-04-14'); -- UNIQUE CONS. Kabul etmez
--INSERT INTO calisanlar VALUES('10009', 'cem', '', '2018-04-14');--INTEGER YERE STRING GIRILMEZ
INSERT INTO calisanlar VALUES('', 'osman', 2000, '2018-04-14');
--INSERT INTO calisanlar VALUES('', 'osman can', 2000, '2018-04-14'); -- PRIMARY KEY
--INSERT INTO calisanlar VALUES( '10002', 'ayse Yılmaz' ,12000, '2018-04-14'); -- PRIMARY KEY
--INSERT INTO calisanlar VALUES( null, 'filiz ' ,12000, '2018-04-14'); -- PRIMARY KEY
INSERT INTO adresler VALUES('10003','Mutlu Sok', '40.Cad.','IST');
INSERT INTO adresler VALUES('10003','Can Sok', '50.Cad.','Ankara');
INSERT INTO adresler VALUES('10002','Ağa Sok', '30.Cad.','Antep');
-- Parent tabloda olmayan id ile child a ekleme yapamayiz
INSERT INTO adresler VALUES('10012','Ağa Sok', '30.Cad.','Antep');
-- FK'ye null değeri atanabilir.
INSERT INTO adresler VALUES(NULL,'Ağa Sok', '30.Cad.','Antep');
INSERT INTO adresler VALUES(NULL,'Ağa Sok', '30.Cad.','Maraş');
SELECT * FROM calisanlar;
SELECT * FROM adresler;
--check constraint 
CREATE TABLE calisanlar1
(
id varchar(15) PRIMARY KEY,
isim varchar(30) UNIQUE,
maas int CHECK(maas>10000) ,
ise_baslama date
);
INSERT INTO calisanlar1 VALUES('10002', 'Mehmet Yılmaz' ,12000, '2018-04-14');
--dql --where kullanimi
SELECT *FROM calisanlar;
SELECT isim FROM calisanlar ;
-- calisanlar tablosundan maasi 5000 den büyük olan isimleri listeleyiniz 
SELECT isim,maas FROM calisanlar WHERE maas>5000;

--CAlisanlar tablosundan ismi veli han olan TÜM veriyi listeleyiniz
SELECT * FROM calisanlar WHERE isim='Veli Han';

--calisanlar tablosundan maasi 5000 olan tüm verileri listeleyiniz
SELECT * FROM calisanlar WHERE maas=5000;

--DML--DELETE KOMUTU
DELETE FROM calisanlar;-- eger parent tablo baska bir child tablo ile iliskili ise önce child tablo silinmelidir
DELETE FROM adresler;
Select*from adresler;
/*
-- ismi Nesibe Yilmaz veya Mustafa Bak olan kayıtları silelim.
*/
CREATE TABLE ogrenciler6
(
id int,
isim VARCHAR(50),
veli_isim VARCHAR(50),
yazili_notu int
);
INSERT INTO ogrenciler6 VALUES(123, 'Ali Can', 'Hasan',75);
INSERT INTO ogrenciler6 VALUES(124, 'Merve Gul', 'Ayse',85);
INSERT INTO ogrenciler6 VALUES(125, 'Kemal Yasa', 'Hasan',85);
INSERT INTO ogrenciler6 VALUES(126, 'Nesibe Yilmaz', 'Ayse',95);
INSERT INTO ogrenciler6 VALUES(127, 'Mustafa Bak', 'Can',99);
INSERT INTO ogrenciler6 VALUES(127, 'Mustafa Bak', 'Ali', 99);
select*from ogrenciler6;
DELETE FROM ogrenciler6 WHERE isim='Nesibe Yilmaz' or 'Mustafa Bak';