--Databa(veritabani)olusturma
create database hld;
create database abd;
-- DDL -DATA DEFINITION LANG
-- Create -Tablo OLUSTURMA
CREATE TABLE ogrenciler1
(
ogrenci_no char(7),
	isim varchar(20),
	soyisim varchar(25),
	not_ort real,-- ondalikli Sayilar icin kullanilir (double gibi)
	kayit_tarih date

);
--Varolan tablodan yeni bir tablo olusturma 
Create Table ogrenci_notlari 
As -- Benzer tablodaki basliklarla ve data tipleriyle yeni bir tablo olusturmak icin normal
--tablo olustururken ki parantezler 
--yerine As kullanip select komutuyla almak istedigimiz verileri aliriz
SELECT isim,soyisim,not_ort,kayit_tarih From ogrenciler1;

-- DML-DATA manupulation lang.
--inser (Database'e veri ekleme)

INSERT INTO ogrenciler1 values('1234567','said','ilhan',85.5,now());
INSERT INTO ogrenciler1 values('1234567','said','ilhan',85.5,'2020-12-11');

--bir tabloya parcali veri eklemek istersek
Insert into ogrenciler1 (isim,soyisim) values('Hld','Abd');
CREATE TABLE ogrenciler5
(
ogrenci_no char(7),-- Uzunluğunu bildiğimiz stringler için CHAR kullanılır
isim varchar(20), -- Uzunluğunu bilmediğimiz stringler için VARCHAR kullanırız
soyisim varchar(25),
not_ort real,-- Ondalıklı sayılar için kullanılır(Double gibi)
kayit_tarih date);

--DQL -Data query lang.
--select
select * From ogrenciler1;
select*from notlar;
--constraint
--unique
--Not Null

CREATE TABLE ogrenciler6
(
ogrenci_no char(7),-- Uzunluğunu bildiğimiz stringler için CHAR kullanılır
isim varchar(20), -- Uzunluğunu bilmediğimiz stringler için VARCHAR kullanırız
soyisim varchar(25),
not_ort real,-- Ondalıklı sayılar için kullanılır(Double gibi)
kayit_tarih date);
select *from ogrenciler6;
CREATE TABLE ogrenciler7
(
ogrenci_no char(7)unique,-- Uzunluğunu bildiğimiz stringler için CHAR kullanılır
isim varchar(20)not null, -- Uzunluğunu bilmediğimiz stringler için VARCHAR kullanırız
soyisim varchar(25),
not_ort real,-- Ondalıklı sayılar için kullanılır(Double gibi)
kayit_tarih date);
select *from ogrenciler7;
Insert Into ogrenciler7 values('1234567','halide','kara',96.4,now());
Insert Into ogrenciler7 values('1234568','Ali','veli',96.4,now());
Insert into ogrenciler7(ogrenci_no,soyisim,not_ort)values('1234569','Evren',85.5);--NOt NUll kisitlamasi oldugu icin bu veri eklenemez

--PRIMARY KEY OLUSTURMA 

CREATE TABLE ogrenciler8
(
ogrenci_no char(7)PRIMARY KEY,-- Uzunluğunu bildiğimiz stringler için CHAR kullanılır
isim varchar(20), -- Uzunluğunu bilmediğimiz stringler için VARCHAR kullanırız
soyisim varchar(25),
not_ort real,-- Ondalıklı sayılar için kullanılır(Double gibi)
kayit_tarih date);

--PRIMARY KEY ATAMASI 2. YOL
CREATE TABLE ogrenciler9
(
ogrenci_no char(7),
isim varchar(20), 
soyisim varchar(25),
not_ort real,
kayit_tarih date,
CONSTRAINT ogr PRIMARY KEY(ogrenci_no)
);
--primary key atamasi 3.yol
CREATE TABLE ogrenciler10
(
ogrenci_no char(7),
isim varchar(20), 
soyisim varchar(25),
not_ort real,
kayit_tarih date,
PRIMARY KEY(ogrenci_no)
);

--Practice 4:
--“tedarikciler3” isimli bir tablo olusturun. Tabloda “tedarikci_id”, “tedarikci_ismi”, “iletisim_isim” field’lari olsun ve “tedarikci_id” yi Primary Key yapin.
--“urunler” isminde baska bir tablo olusturun “tedarikci_id” ve “urun_id” field’lari olsun ve
--“tedarikci_id” yi Foreign Key yapin.
CREATE TABLE tedarikciler3
(
tedarikci_id char(5) PRIMARY KEY,
tedarikci_ismi varchar(20),
iletisim_isim varchar(20)
);
CREATE TABLE urunler
(
tedarikci_id char(5),
urun_id char(5),
FOREIGN KEY (tedarikci_id) REFERENCES tedarikciler3(tedarikci_id)
);
CREATE TABLE urunler
(
tedarikci_id char(5),
urun_id char(5),
CONSTRAINT urn_fk FOREIGN KEY (tedarikci_id) REFERENCES tedarikciler3(tedarikci_id)
);

/*
“calisanlar” isimli bir Tablo olusturun. Icinde “id”, “isim”, “maas”, “ise_baslama” field’lari olsun. “id” yi Primary Key yapin, “isim” i Unique, “maas” i Not Null yapın.
“adresler” isminde baska bir tablo olusturun.Icinde “adres_id”, “sokak”, “cadde” ve “sehir” fieldlari olsun. “adres_id” field‘i ile Foreign Key oluşturun.
*/

CREATE TABLE calisanlar
(
id varchar(15) PRIMARY KEY,
isim varchar(30) UNIQUE,
maas int NOT NULL,
ise_baslama date
);
	
CREATE TABLE adresler
(
adres_id varchar(30),
sokak varchar(30),
cadde varchar(30),
sehir varchar(30),
FOREIGN KEY (adres_id) REFERENCES calisanlar(id)
);

select*From adresler;
INSERT INTO calisanlar VALUES('10002', 'Mehmet Yılmaz' ,12000, '2018-04-14');
INSERT INTO calisanlar VALUES('10008', null, 5000, '2018-04-14');
--INSERT INTO calisanlar VALUES('10010', 'Mehmet Yılmaz', 5000, '2018-04-14'); -- UNIQUE CONS. Kabul etmez
INSERT INTO calisanlar VALUES('10004', 'Veli Han', 5000, '2018-04-14');
INSERT INTO calisanlar VALUES('10005', 'Mustafa Ali', 5000, '2018-04-14');
--INSERT INTO calisanlar VALUES('10006', 'Canan Yaş', NULL, '2019-04-12'); -- NOT NULL CONS. Kabul etmez
INSERT INTO calisanlar VALUES('10003', 'CAN', 5000, '2018-04-14');
--INSERT INTO calisanlar VALUES('10007', 'CAN', 5000, '2018-04-14'); -- UNIQUE CONS. Kabul etmez
--INSERT INTO calisanlar VALUES('10009', 'cem', '', '2018-04-14');--INTEGER YERE STRING GIRILMEZ
INSERT INTO calisanlar VALUES('', 'osman', 2000, '2018-04-14');
--INSERT INTO calisanlar VALUES('', 'osman can', 2000, '2018-04-14'); -- PRIMARY KEY
--INSERT INTO calisanlar VALUES( '10002', 'ayse Yılmaz' ,12000, '2018-04-14'); -- PRIMARY KEY
--INSERT INTO calisanlar VALUES( null, 'filiz ' ,12000, '2018-04-14'); -- PRIMARY KEY
INSERT INTO adresler VALUES('10003','Mutlu Sok', '40.Cad.','IST');
INSERT INTO adresler VALUES('10003','Can Sok', '50.Cad.','Ankara');
INSERT INTO adresler VALUES('10002','Ağa Sok', '30.Cad.','Antep');
-- Parent tabloda olmayan id ile child a ekleme yapamayiz
INSERT INTO adresler VALUES('10012','Ağa Sok', '30.Cad.','Antep');
-- FK'ye null değeri atanabilir.
INSERT INTO adresler VALUES(NULL,'Ağa Sok', '30.Cad.','Antep');
INSERT INTO adresler VALUES(NULL,'Ağa Sok', '30.Cad.','Maraş');
SELECT * FROM calisanlar;
SELECT * FROM adresler;
--check constraint 
CREATE TABLE calisanlar1
(
id varchar(15) PRIMARY KEY,
isim varchar(30) UNIQUE,
maas int CHECK(maas>10000) ,
ise_baslama date
);
INSERT INTO calisanlar1 VALUES('10002', 'Mehmet Yılmaz' ,12000, '2018-04-14');
--dql --where kullanimi
SELECT *FROM calisanlar;
SELECT isim FROM calisanlar ;
-- calisanlar tablosundan maasi 5000 den büyük olan isimleri listeleyiniz 
SELECT isim,maas FROM calisanlar WHERE maas>5000;

--CAlisanlar tablosundan ismi veli han olan TÜM veriyi listeleyiniz
SELECT * FROM calisanlar WHERE isim='Veli Han';

--calisanlar tablosundan maasi 5000 olan tüm verileri listeleyiniz
SELECT * FROM calisanlar WHERE maas=5000;

--DML--DELETE KOMUTU
DELETE FROM calisanlar;-- eger parent tablo baska bir child tablo ile iliskili ise önce child tablo silinmelidir
DELETE FROM adresler;
Select*from adresler;
/*
-- ismi Nesibe Yilmaz veya Mustafa Bak olan kayıtları silelim.
*/
CREATE TABLE ogrenciler6
(
id int,
isim VARCHAR(50),
veli_isim VARCHAR(50),
yazili_notu int
);
INSERT INTO ogrenciler6 VALUES(123, 'Ali Can', 'Hasan',75);
INSERT INTO ogrenciler6 VALUES(124, 'Merve Gul', 'Ayse',85);
INSERT INTO ogrenciler6 VALUES(125, 'Kemal Yasa', 'Hasan',85);
INSERT INTO ogrenciler6 VALUES(126, 'Nesibe Yilmaz', 'Ayse',95);
INSERT INTO ogrenciler6 VALUES(127, 'Mustafa Bak', 'Can',99);
INSERT INTO ogrenciler6 VALUES(127, 'Mustafa Bak', 'Ali', 99);
select*from ogrenciler6;
DELETE FROM ogrenciler6 WHERE isim='Nesibe Yilmaz' or isim = 'Mustafa Bak';

--veli ismi hasan datayi silelim
DELETE FROM ogrenciler6 WHERE veli_isim='Hasan';
select*from ogrenciler6;

--TRUNCATE--
-- BIR tablodaki tüm verileri geri alamayacagiz sekilde siler.sartli silme yapmaz
TRUNCATE ogrenciler6
--On DELETE CASCADE
DROP TABLE if exists talebeler

CREATE TABLE talebeler
(
id CHAR(3) primary key,
isim VARCHAR(50),
veli_isim VARCHAR(50),
yazili_notu int
);

CREATE TABLE notlar(
talebe_id char(3),
ders_adi varchar(30),
yazili_notu int,
CONSTRAINT notlar_fk FOREIGN KEY (talebe_id) REFERENCES talebeler(id)
on delete cascade
);

INSERT INTO talebeler VALUES(123, 'Ali Can', 'Hasan',75);
INSERT INTO talebeler VALUES(124, 'Merve Gul', 'Ayse',85);
INSERT INTO talebeler VALUES(125, 'Kemal Yasa', 'Hasan',85);
INSERT INTO talebeler VALUES(126, 'Nesibe Yılmaz', 'Ayse',95);
INSERT INTO talebeler VALUES(127, 'Mustafa Bak', 'Can',99);

INSERT INTO notlar VALUES ('123','kimya',75);
INSERT INTO notlar VALUES ('124', 'fizik',65);
INSERT INTO notlar VALUES ('125', 'tarih',90);
INSERT INTO notlar VALUES ('126', 'Matematik',90);
select * from talebeler;
select * from notlar;

--Notlar tablosundan id'si 123 olan datayi silelim 
DELETE FROM notlar WHERE talebe_id='123';

--Talebeler tablosundan id'si 126 olan datayi silelim
DELETE FROM talebeler WHERE id= '126';

CREATE TABLE talebe
(
id CHAR(3) primary key,
isim VARCHAR(50),
veli_isim VARCHAR(50),
yazili_notu int
);

CREATE TABLE not1(
talebe_id char(3),
ders_adi varchar(30),
yazili_notu int,
CONSTRAINT notlar_fk FOREIGN KEY (talebe_id) REFERENCES talebe(id)
on delete cascade
);
INSERT INTO talebe VALUES(123, 'Ali Can', 'Hasan',75);
INSERT INTO talebe VALUES(124, 'Merve Gul', 'Ayse',85);
INSERT INTO talebe VALUES(125, 'Kemal Yasa', 'Hasan',85);
INSERT INTO talebe VALUES(126, 'Nesibe Yılmaz', 'Ayse',95);
INSERT INTO talebe VALUES(127, 'Mustafa Bak', 'Can',99);

INSERT INTO not1 VALUES ('123','kimya',75);
INSERT INTO not1 VALUES ('124', 'fizik',65);
INSERT INTO not1 VALUES ('125', 'tarih',90);
INSERT INTO not1 VALUES ('126', 'Matematik',90);
select * from talebe;
select * from not1;

--talebeler tablosundan id'si 126 olan datayi silelim
DELETE FROM talebe WHERE id='126';
-- ON DELETECASCADE --
/*
Normalde data silmek için önce "Child Table" dan datayi siler daha sonra parent'dan sileriz ama
ON DELETE CASCADE iliskisi kurulduğunda direk "Parent Table"  dan datayi silebiliriz. Data "Parent"dan
silindiğinde "Chield" dan da silinir.
*/
/*
    Her defasında önce child tablodaki verileri silmek yerine ON DELETE CASCADE silme özelliği ile
parent tablo dan da veri silebiliriz. Yanlız ON DELETE CASCADE komutu kullanımında parent tablodan sildiğimiz
data child tablo dan da silinir
*/

--In CONDITION
DRop TABLe if exists musteriler;
CREATE TABLE musteriler (
urun_id int,
musteri_isim varchar(50), urun_isim varchar(50)
);
INSERT INTO musteriler VALUES (10, 'Mark', 'Orange'); 
INSERT INTO musteriler VALUES (10, 'Mark', 'Orange'); 
INSERT INTO musteriler VALUES (20, 'John', 'Apple');
INSERT INTO musteriler VALUES (30, 'Amy', 'Palm'); 
INSERT INTO musteriler VALUES (20, 'Mark', 'Apple');
INSERT INTO musteriler VALUES (10, 'Adem', 'Orange');
INSERT INTO musteriler VALUES (40, 'John', 'Apricot'); 
INSERT INTO musteriler VALUES (20, 'Eddie', 'Apple' );
select * from musteriler;
--Musteriler tablosundan urun ismi orange , apple ve apricot olan tüm verileri listeleyiniz
SELECT * FROM musteriler WHERE urun_isim='Orange' OR urun_isim ='Apple' OR urun_isim='Apricot';
SELECT * FROM musteriler WHERE urun_isim='Orange' and urun_id=10;

--IN CONDITION 
SELECT *FROM musteriler WHERE urun_isim IN('Orange','Apple','Apricot');
-- Not In --> Yazdigimiz verilerin disindakileri getirir
SELECT *FROM musteriler WHERE urun_isim Not IN('Orange','Apple','Apricot');

--Between CONDITION

--Musteriler tablosundan id'si 20 ile 40 arasinda olan verileri listeleyiniz 
SELECT *FROM musteriler WHERE urun_id>=20 and  urun_id<=40;

SELECT *FROM musteriler WHERE urun_id between 20 and 40;
--Not Between
SELECT *FROM musteriler WHERE urun_id  not between 20 and 40;
--SUBQUERIES

CREATE TABLE calisanlar2
(
id int,
isim VARCHAR(50),
sehir VARCHAR(50),
maas int,
isyeri VARCHAR(20)
);
INSERT INTO calisanlar2 VALUES(123456789, 'Ali Seker', 'Istanbul', 2500, 'Vakko');
INSERT INTO calisanlar2 VALUES(234567890, 'Ayse Gul', 'Istanbul', 1500, 'LCWaikiki');
INSERT INTO calisanlar2 VALUES(345678901, 'Veli Yilmaz', 'Ankara', 3000, 'Vakko');
INSERT INTO calisanlar2 VALUES(456789012, 'Veli Yilmaz', 'Izmir', 1000, 'Pierre Cardin');
INSERT INTO calisanlar2 VALUES(567890123, 'Veli Yilmaz', 'Ankara', 7000, 'Adidas');
INSERT INTO calisanlar2 VALUES(456789012, 'Ayse Gul', 'Ankara', 1500, 'Pierre Cardin');
INSERT INTO calisanlar2 VALUES(123456710, 'Fatma Yasa', 'Bursa', 2500, 'Vakko');
CREATE TABLE markalar
(
marka_id int,
marka_isim VARCHAR(20),
calisan_sayisi int
);

INSERT INTO markalar VALUES(100, 'Vakko', 12000);
INSERT INTO markalar VALUES(101, 'Pierre Cardin', 18000);
INSERT INTO markalar VALUES(102, 'Adidas', 10000);
INSERT INTO markalar VALUES(103, 'LCWaikiki', 21000);

SELECT*FROM calisanlar2;
SELECT *FROM markalar;
--Calisanlar 15.000'den cok olan marklarin isimlerini 
-- ve bu marklada calisanlarin isimlerini ve maaslarini listleyin .

SELECT isim, maas, isyeri FROM calisanlar2
where isyeri In (SELECT marka_isim From markalar WHERE calisan_sayisi>15000);
-- marka_id’si 101’den büyük olan marka çalişanlarinin isim, maaş ve şehirlerini listeleyiniz

SELECT isim, maas, sehir FROM calisanlar2 where isyeri In (SELECT marka_isim From markalar WHERE marka_id>101);
--ÖDEV- Ankara’da calisani olan markalarin marka id'lerini ve calisan sayilarini listeleyiniz.
--AGGREGATE METHOD
--calisanlarda tablosundan en yüksek maasi listeleyelim 
SELECT max(maas) AS maksimum_maas FROM calisanlar2;
/*
EGER bir sutun gecici olarak bir isim vermek istersek AS komutunu yazdiktan sonra vermek istedigimiz ismi yazariz
*/
--Calisanlar tablosundan en düsük maasi listeleyelim 
SELECT min(maas) AS en_dusuk_maas FROM calisanlar2

--Calisanlar tablosundaki maas'larin toplamini listleyiniz 
SElect sum(maas) FROM calisanlar2
--calisanlar tablosundaki maas'larin sayisini listeleyiniz 
SELECT count(*)FROM calisanlar2
SELECT avg(maas) AS maas_ortalaması FROM calisanlar2;
SELECT round(avg(maas),2) AS maas_ortalaması FROM calisanlar2;
--Calisanlar tablosundaki maasların sayısı
SELECT count(maas) AS maas_sayısı FROM calisanlar2;
SELECT count(*) AS maas_sayisi FROM calisanlar2;
/*
Eğer count(*) kullanırsak tablodaki tüm satırların sayısını verir
Sutun adı kullanırsak o sutundaki sayıları verir
*/

-- Her markanin id’sini, ismini ve toplam kaç şehirde bulunduğunu listeleyen bir SORGU yaziniz

select * from calisanlar 
select * from markalar 
--AgGREGRATE METHODLAR SUBQUERY 
--HEr markanin is'si ini,ismini ve toplam kac sehirde 
-- bulundugunu listeleyen bir sorgu yaziniz 
SELECT marka_id, marka_isim,(SELECT count (sehir)FROM calisanlar2 WHERE marka_isim=isyeri)FROM markalar;

-- Her markanin ismini, calisan sayisini ve o markaya ait calisanlarin toplam maaşini listeleyiniz
SELECT marka_isim, calisan_sayisi as calisan,(SELECT sum(maas)FROM calisanlar2 WHERE isyer=marka_isim)as toplam_maas
FROM markalar
-- Her markanin ismini, calisan sayisini ve o markaya ait 
--calisanlarin maksimum ve minumum maaşini listeleyen bir Sorgu yaziniz.

SELECT marka_isim,calisan_sayisi,
(SELECT max(maas)FROM calisanlar2 WHERE isyeri=marka_isim ),
(SELECT min (maas)FROM calisanlar2 WHERE isyeri=marka_isim)
FROM markalar

--vien KUllanimi
CREATE VIEW maxminmaas
AS 
SELECT marka_isim,calisan_sayisi,
(SELECT max(maas)FROM calisanlar2 WHERE isyeri=marka_isim)as enyuksekmaas,
(SELECT min(maas) FROM calisanlar2 WHERE isyeri=marka_isim) as endusukmaas
FRom markalar;
SELECT *from maxminmaas
--VIEW KULLANIMI
/*
Yaptigimiz sorgulari hafizaya alir ve tekrar bizden istenen sorgulama yerine
view'e atadigimiz ismi SELECT komutuyla cagiririz
*/
/*
EXISTS Condition subquery’ler ile kullanilir. IN ifadesinin kullanımına benzer
olarak, EXISTS ve NOT EXISTS ifadeleri de alt sorgudan getirilen değerlerin içerisinde
bir değerin olması veya olmaması durumunda işlem yapılmasını sağlar
*/
--Exists COndition
CREATE TABLE mart
(   
urun_id int,    
musteri_isim varchar(50), 
urun_isim varchar(50)
);
INSERT INTO mart VALUES (10, 'Mark', 'Honda');
INSERT INTO mart VALUES (20, 'John', 'Toyota');
INSERT INTO mart VALUES (30, 'Amy', 'Ford');
INSERT INTO mart VALUES (20, 'Mark', 'Toyota');
INSERT INTO mart VALUES (10, 'Adam', 'Honda');
INSERT INTO mart VALUES (40, 'John', 'Hyundai');
INSERT INTO mart VALUES (20, 'Eddie', 'Toyota');

CREATE TABLE nisan 
(   
urun_id int ,
musteri_isim varchar(50),
urun_isim varchar(50)
);
INSERT INTO nisan VALUES (10, 'Hasan', 'Honda');
INSERT INTO nisan VALUES (10, 'Kemal', 'Honda');
INSERT INTO nisan VALUES (20, 'Ayse', 'Toyota');
INSERT INTO nisan VALUES (50, 'Yasar', 'Volvo');
INSERT INTO nisan VALUES (20, 'Mine', 'Toyota');

select *from mart
select *from nisan

--MART VE NİSAN aylarında aynı URUN_ID ile satılan ürünlerin URUN_ID’lerini listeleyen ve aynı 
--zamanda bu ürünleri MART ayında alan MUSTERI_ISIM 'lerini listeleyen bir sorgu yazınız.
SELECT urun_id,musteri_isim FROM mart
WHERE exists (select urun_id FROM nisan WHERE mart.urun_id=nisan.urun_id)

--Her iki ayda birden satılan ürünlerin URUN_ISIM'lerini ve bu ürünleri
--NİSAN ayında satın alan MUSTERI_ISIM'lerini listeleyen bir sorgu yazınız.

SELECT urun_isim,musteri_isim FROM nisan
WHERE exists (SELECT urun_isim FROM mart where mart.urun_isim=nisan.urun_isim);


CREATE TABLE tedarikciler -- parent
(
vergi_no int PRIMARY KEY,
firma_ismi VARCHAR(50),
irtibat_ismi VARCHAR(50)
);
INSERT INTO tedarikciler VALUES (101, 'IBM', 'Kim Yon');
INSERT INTO tedarikciler VALUES (102, 'Huawei', 'Çin Li');
INSERT INTO tedarikciler VALUES (103, 'Erikson', 'Maki Tammen');
INSERT INTO tedarikciler VALUES (104, 'Apple', 'Adam Eve');

CREATE TABLE urunler -- child
(
ted_vergino int, 
urun_id int, 
urun_isim VARCHAR(50), 
musteri_isim VARCHAR(50),
CONSTRAINT fk_urunler FOREIGN KEY(ted_vergino) REFERENCES tedarikciler(vergi_no)
on delete cascade
);    
INSERT INTO urunler VALUES(101, 1001,'Laptop', 'Ayşe Can');
INSERT INTO urunler VALUES(102, 1002,'Phone', 'Fatma Aka');
INSERT INTO urunler VALUES(102, 1003,'TV', 'Ramazan Öz');
INSERT INTO urunler VALUES(102, 1004,'Laptop', 'Veli Han');
INSERT INTO urunler VALUES(103, 1005,'Phone', 'Canan Ak');
INSERT INTO urunler VALUES(104, 1006,'TV', 'Ali Bak');
INSERT INTO urunler VALUES(104, 1007,'Phone', 'Aslan Yılmaz');
Select *from tedarikciler
select *from urunler
---- vergi_no’su 102 olan tedarikcinin firma ismini 'Vestel' olarak güncelleyeniz.
/*
UPDATE tabla_adi
set sutun_ismi='istenen veri'*/
UPDATE tedarikciler
SET firma_ismi = 'Vestel' WHERE vergi_no=102;
---- vergi_no’su 101 olan tedarikçinin firma ismini 'casper' ve irtibat_ismi’ni 'Ali Veli' olarak güncelleyiniz.
UPDATE tedarikciler SET firma_ismi = 'casper' WHERE vergi_no=101;
UPDATE tedarikciler SET irtibat_ismi = 'Ali Veli' WHERE vergi_no=101;
UPDATE tedarikciler SET firma_ismi = 'casper', irtibat_ismi='Ali Veli' WHERE vergi_no=101;

-- urunler tablosundaki 'Phone' değerlerini 'Telefon' olarak güncelleyiniz.
UPDATE urunler
SET urun_isim = 'Telefon'
WHERE urun_isim='Phone';
-- urunler tablosundaki urun_id değeri 1004'ten büyük olanların urun_id’sini 1 arttırın.
UPDATE urunler SET urun_id = urun_id+1 WHERE urun_id > 1004;
-- urunler tablosundaki tüm ürünlerin urun_id değerini ted_vergino sutun değerleri ile toplayarak güncelleyiniz.
UPDATE urunler SET urun_id = urun_id + ted_vergino;
/** urunler tablosundan Ali Bak’in aldigi urunun ismini, tedarikci tablosunda irtibat_ismi 
'Adam Eve' olan firmanın ismi (firma_ismi) ile degistiriniz.*/
-- Bu update işlemini yapmadan önce, tabloları eski haline getirmeliyiz.
UPDATE urunler
SET urun_isim = (select firma_ismi from tedarikciler WHERE irtibat_ismi = 'Adam Eve')
WHERE musteri_isim='Ali Bak';
select*from tedarikciler
select*from urunler